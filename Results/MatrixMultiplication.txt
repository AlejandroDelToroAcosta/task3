"C:\Program Files\Java\jdk-17\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55205:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\aadel\Desktop\GCID\Tercero\BD\Ind.Assignments\Task3\target\test-classes;C:\Users\aadel\Desktop\GCID\Tercero\BD\Ind.Assignments\Task3\target\classes;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-core\1.35\jmh-core-1.35.jar;C:\Users\aadel\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\aadel\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.35\jmh-generator-annprocess-1.35.jar;C:\Users\aadel\.m2\repository\org\jblas\jblas\1.2.4\jblas-1.2.4.jar org.openjdk.jmh.Main "benchmark.multiplication.MatrixMultiplicationBenchmark.*"
# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55205:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.multiplication.MatrixMultiplicationBenchmark.multiply
# Parameters: (size = 100)

# Run progress: 0,00% complete, ETA 00:25:00
# Fork: 1 of 5
# Warmup Iteration   1: 1,423 ms/op
# Warmup Iteration   2: 1,339 ms/op
# Warmup Iteration   3: 1,313 ms/op
# Warmup Iteration   4: 1,349 ms/op
# Warmup Iteration   5: 1,331 ms/op
Iteration   1: 1,297 ms/op
Iteration   2: 1,384 ms/op
Iteration   3: 1,380 ms/op
Iteration   4: 1,400 ms/op
Iteration   5: 1,404 ms/op

# Run progress: 6,67% complete, ETA 00:23:35
# Fork: 2 of 5
# Warmup Iteration   1: 1,369 ms/op
# Warmup Iteration   2: 1,217 ms/op
# Warmup Iteration   3: 1,276 ms/op
# Warmup Iteration   4: 1,285 ms/op
# Warmup Iteration   5: 1,234 ms/op
Iteration   1: 1,251 ms/op
Iteration   2: 1,264 ms/op
Iteration   3: 1,289 ms/op
Iteration   4: 1,336 ms/op
Iteration   5: 1,380 ms/op

# Run progress: 13,33% complete, ETA 00:21:53
# Fork: 3 of 5
# Warmup Iteration   1: 1,356 ms/op
# Warmup Iteration   2: 1,302 ms/op
# Warmup Iteration   3: 1,276 ms/op
# Warmup Iteration   4: 1,272 ms/op
# Warmup Iteration   5: 1,285 ms/op
Iteration   1: 1,256 ms/op
Iteration   2: 1,260 ms/op
Iteration   3: 1,274 ms/op
Iteration   4: 1,380 ms/op
Iteration   5: 1,360 ms/op

# Run progress: 20,00% complete, ETA 00:20:12
# Fork: 4 of 5
# Warmup Iteration   1: 1,390 ms/op
# Warmup Iteration   2: 1,238 ms/op
# Warmup Iteration   3: 1,313 ms/op
# Warmup Iteration   4: 1,265 ms/op
# Warmup Iteration   5: 1,310 ms/op
Iteration   1: 1,232 ms/op
Iteration   2: 1,283 ms/op
Iteration   3: 1,290 ms/op
Iteration   4: 1,296 ms/op
Iteration   5: 1,404 ms/op

# Run progress: 26,67% complete, ETA 00:18:31
# Fork: 5 of 5
# Warmup Iteration   1: 1,370 ms/op
# Warmup Iteration   2: 1,311 ms/op
# Warmup Iteration   3: 1,271 ms/op
# Warmup Iteration   4: 1,225 ms/op
# Warmup Iteration   5: 1,255 ms/op
Iteration   1: 1,245 ms/op
Iteration   2: 1,268 ms/op
Iteration   3: 1,262 ms/op
Iteration   4: 1,396 ms/op
Iteration   5: 1,369 ms/op


Result "benchmark.multiplication.MatrixMultiplicationBenchmark.multiply":
  1,318 ±(99.9%) 0,045 ms/op [Average]
  (min, avg, max) = (1,232, 1,318, 1,404), stdev = 0,060
  CI (99.9%): [1,273, 1,363] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55205:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.multiplication.MatrixMultiplicationBenchmark.multiply
# Parameters: (size = 500)

# Run progress: 33,33% complete, ETA 00:16:50
# Fork: 1 of 5
# Warmup Iteration   1: 254,333 ms/op
# Warmup Iteration   2: 255,908 ms/op
# Warmup Iteration   3: 251,322 ms/op
# Warmup Iteration   4: 249,148 ms/op
# Warmup Iteration   5: 250,449 ms/op
Iteration   1: 260,578 ms/op
Iteration   2: 246,556 ms/op
Iteration   3: 244,262 ms/op
Iteration   4: 250,430 ms/op
Iteration   5: 252,452 ms/op

# Run progress: 40,00% complete, ETA 00:15:10
# Fork: 2 of 5
# Warmup Iteration   1: 278,493 ms/op
# Warmup Iteration   2: 247,638 ms/op
# Warmup Iteration   3: 270,006 ms/op
# Warmup Iteration   4: 6735,010 ms/op
# Warmup Iteration   5: 276,042 ms/op
Iteration   1: 214,768 ms/op
Iteration   2: 152,054 ms/op
Iteration   3: 154,203 ms/op
Iteration   4: 150,949 ms/op
Iteration   5: 150,552 ms/op

# Run progress: 46,67% complete, ETA 00:18:11
# Fork: 3 of 5
# Warmup Iteration   1: 155,485 ms/op
# Warmup Iteration   2: 152,955 ms/op
# Warmup Iteration   3: 153,496 ms/op
# Warmup Iteration   4: 155,300 ms/op
# Warmup Iteration   5: 155,082 ms/op
Iteration   1: 157,843 ms/op
Iteration   2: 157,929 ms/op
Iteration   3: 155,971 ms/op
Iteration   4: 156,484 ms/op
Iteration   5: 160,747 ms/op

# Run progress: 53,33% complete, ETA 00:15:25
# Fork: 4 of 5
# Warmup Iteration   1: 157,621 ms/op
# Warmup Iteration   2: 155,973 ms/op
# Warmup Iteration   3: 154,762 ms/op
# Warmup Iteration   4: 155,588 ms/op
# Warmup Iteration   5: 156,276 ms/op
Iteration   1: 158,002 ms/op
Iteration   2: 156,889 ms/op
Iteration   3: 160,058 ms/op
Iteration   4: 160,493 ms/op
Iteration   5: 158,143 ms/op

# Run progress: 60,00% complete, ETA 00:12:52
# Fork: 5 of 5
# Warmup Iteration   1: 162,292 ms/op
# Warmup Iteration   2: 157,925 ms/op
# Warmup Iteration   3: 157,994 ms/op
# Warmup Iteration   4: 159,603 ms/op
# Warmup Iteration   5: 158,323 ms/op
Iteration   1: 160,571 ms/op
Iteration   2: 180,132 ms/op
Iteration   3: 170,976 ms/op
Iteration   4: 171,332 ms/op
Iteration   5: 183,501 ms/op


Result "benchmark.multiplication.MatrixMultiplicationBenchmark.multiply":
  181,035 ±(99.9%) 28,565 ms/op [Average]
  (min, avg, max) = (150,552, 181,035, 260,578), stdev = 38,134
  CI (99.9%): [152,470, 209,600] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=55205:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.multiplication.MatrixMultiplicationBenchmark.multiply
# Parameters: (size = 1024)

# Run progress: 66,67% complete, ETA 00:10:30
# Fork: 1 of 5
# Warmup Iteration   1: 6073,739 ms/op
# Warmup Iteration   2: 6501,794 ms/op
# Warmup Iteration   3: 4527,199 ms/op
# Warmup Iteration   4: 4039,587 ms/op
# Warmup Iteration   5: 3294,140 ms/op
Iteration   1: 3661,369 ms/op
Iteration   2: 2233,634 ms/op
Iteration   3: 2291,876 ms/op
Iteration   4: 1930,147 ms/op
Iteration   5: 2027,220 ms/op

# Run progress: 73,33% complete, ETA 00:08:22
# Fork: 2 of 5
# Warmup Iteration   1: 3101,642 ms/op
# Warmup Iteration   2: 2665,933 ms/op
# Warmup Iteration   3: 1822,668 ms/op
# Warmup Iteration   4: 1773,544 ms/op
# Warmup Iteration   5: 1930,835 ms/op
Iteration   1: 1753,286 ms/op
Iteration   2: 2280,477 ms/op
Iteration   3: 1693,663 ms/op
Iteration   4: 1791,380 ms/op
Iteration   5: 1764,849 ms/op

# Run progress: 80,00% complete, ETA 00:06:13
# Fork: 3 of 5
# Warmup Iteration   1: 2622,952 ms/op
# Warmup Iteration   2: 1788,568 ms/op
# Warmup Iteration   3: 1842,070 ms/op
# Warmup Iteration   4: 1895,838 ms/op
# Warmup Iteration   5: 1928,482 ms/op
Iteration   1: 1787,610 ms/op
Iteration   2: 2306,112 ms/op
Iteration   3: 1840,148 ms/op
Iteration   4: 1905,640 ms/op
Iteration   5: 1889,241 ms/op

# Run progress: 86,67% complete, ETA 00:04:06
# Fork: 4 of 5
# Warmup Iteration   1: 2635,012 ms/op
# Warmup Iteration   2: 1791,078 ms/op
# Warmup Iteration   3: 1936,026 ms/op
# Warmup Iteration   4: 1768,800 ms/op
# Warmup Iteration   5: 1869,486 ms/op
Iteration   1: 1812,193 ms/op
Iteration   2: 1711,161 ms/op
Iteration   3: 1772,248 ms/op
Iteration   4: 1839,312 ms/op
Iteration   5: 1784,238 ms/op

# Run progress: 93,33% complete, ETA 00:02:02
# Fork: 5 of 5
# Warmup Iteration   1: 2524,696 ms/op
# Warmup Iteration   2: 1780,584 ms/op
# Warmup Iteration   3: 1836,119 ms/op
# Warmup Iteration   4: 1799,191 ms/op
# Warmup Iteration   5: 1932,193 ms/op
Iteration   1: 1757,235 ms/op
Iteration   2: 1866,303 ms/op
Iteration   3: 1798,195 ms/op
Iteration   4: 1808,107 ms/op
Iteration   5: 1889,995 ms/op


Result "benchmark.multiplication.MatrixMultiplicationBenchmark.multiply":
  1967,825 ±(99.9%) 298,334 ms/op [Average]
  (min, avg, max) = (1693,663, 1967,825, 3661,369), stdev = 398,267
  CI (99.9%): [1669,492, 2266,159] (assumes normal distribution)


# Run complete. Total time: 00:30:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               (size)  Mode  Cnt     Score     Error  Units
MatrixMultiplicationBenchmark.multiply     100  avgt   25     1,318 ±   0,045  ms/op
MatrixMultiplicationBenchmark.multiply     500  avgt   25   181,035 ±  28,565  ms/op
MatrixMultiplicationBenchmark.multiply    1024  avgt   25  1967,825 ± 298,334  ms/op

Process finished with exit code 0
