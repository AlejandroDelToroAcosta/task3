"C:\Program Files\Java\jdk-17\bin\java.exe" "-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=57424:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin" -Dfile.encoding=UTF-8 -classpath C:\Users\aadel\Desktop\GCID\Tercero\BD\Ind.Assignments\Task3\target\test-classes;C:\Users\aadel\Desktop\GCID\Tercero\BD\Ind.Assignments\Task3\target\classes;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-core\1.35\jmh-core-1.35.jar;C:\Users\aadel\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\aadel\.m2\repository\org\apache\commons\commons-math3\3.2\commons-math3-3.2.jar;C:\Users\aadel\.m2\repository\org\openjdk\jmh\jmh-generator-annprocess\1.35\jmh-generator-annprocess-1.35.jar;C:\Users\aadel\.m2\repository\org\jblas\jblas\1.2.4\jblas-1.2.4.jar org.openjdk.jmh.Main "benchmark.multiplication.VectorizedBenchmark.*"
# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=57424:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.multiplication.VectorizedBenchmark.multiply
# Parameters: (matrixSize = 100)

# Run progress: 0,00% complete, ETA 00:03:45
# Fork: 1 of 3
# Warmup Iteration   1: 1,032 ms/op
# Warmup Iteration   2: 0,952 ms/op
Iteration   1: 0,946 ms/op
Iteration   2: 0,944 ms/op
Iteration   3: 0,947 ms/op

# Run progress: 11,11% complete, ETA 00:03:27
# Fork: 2 of 3
# Warmup Iteration   1: 1,069 ms/op
# Warmup Iteration   2: 0,977 ms/op
Iteration   1: 0,951 ms/op
Iteration   2: 0,960 ms/op
Iteration   3: 0,961 ms/op

# Run progress: 22,22% complete, ETA 00:03:01
# Fork: 3 of 3
# Warmup Iteration   1: 1,017 ms/op
# Warmup Iteration   2: 0,961 ms/op
Iteration   1: 0,952 ms/op
Iteration   2: 0,951 ms/op
Iteration   3: 0,944 ms/op


Result "benchmark.multiplication.VectorizedBenchmark.multiply":
  0,951 ±(99.9%) 0,011 ms/op [Average]
  (min, avg, max) = (0,944, 0,951, 0,961), stdev = 0,006
  CI (99.9%): [0,940, 0,961] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=57424:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.multiplication.VectorizedBenchmark.multiply
# Parameters: (matrixSize = 500)

# Run progress: 33,33% complete, ETA 00:02:35
# Fork: 1 of 3
# Warmup Iteration   1: 203,721 ms/op
# Warmup Iteration   2: 199,677 ms/op
Iteration   1: 201,210 ms/op
Iteration   2: 199,628 ms/op
Iteration   3: 200,267 ms/op

# Run progress: 44,44% complete, ETA 00:02:10
# Fork: 2 of 3
# Warmup Iteration   1: 203,716 ms/op
# Warmup Iteration   2: 199,775 ms/op
Iteration   1: 199,552 ms/op
Iteration   2: 199,565 ms/op
Iteration   3: 199,206 ms/op

# Run progress: 55,56% complete, ETA 00:01:44
# Fork: 3 of 3
# Warmup Iteration   1: 203,847 ms/op
# Warmup Iteration   2: 200,903 ms/op
Iteration   1: 201,010 ms/op
Iteration   2: 199,656 ms/op
Iteration   3: 200,812 ms/op


Result "benchmark.multiplication.VectorizedBenchmark.multiply":
  200,101 ±(99.9%) 1,246 ms/op [Average]
  (min, avg, max) = (199,206, 200,101, 201,210), stdev = 0,742
  CI (99.9%): [198,854, 201,347] (assumes normal distribution)


# JMH version: 1.35
# VM version: JDK 17, Java HotSpot(TM) 64-Bit Server VM, 17+35-LTS-2724
# VM invoker: C:\Program Files\Java\jdk-17\bin\java.exe
# VM options: -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\lib\idea_rt.jar=57424:C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2023.2.2\bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: benchmark.multiplication.VectorizedBenchmark.multiply
# Parameters: (matrixSize = 1024)

# Run progress: 66,67% complete, ETA 00:01:18
# Fork: 1 of 3
# Warmup Iteration   1: 1960,620 ms/op
# Warmup Iteration   2: 1920,475 ms/op
Iteration   1: 1915,594 ms/op
Iteration   2: 1777,899 ms/op
Iteration   3: 1785,732 ms/op

# Run progress: 77,78% complete, ETA 00:00:53
# Fork: 2 of 3
# Warmup Iteration   1: 2006,161 ms/op
# Warmup Iteration   2: 1963,582 ms/op
Iteration   1: 1945,307 ms/op
Iteration   2: 1814,929 ms/op
Iteration   3: 1822,814 ms/op

# Run progress: 88,89% complete, ETA 00:00:26
# Fork: 3 of 3
# Warmup Iteration   1: 1962,453 ms/op
# Warmup Iteration   2: 1911,986 ms/op
Iteration   1: 1915,285 ms/op
Iteration   2: 1784,191 ms/op
Iteration   3: 2203,186 ms/op


Result "benchmark.multiplication.VectorizedBenchmark.multiply":
  1884,993 ±(99.9%) 227,788 ms/op [Average]
  (min, avg, max) = (1777,899, 1884,993, 2203,186), stdev = 135,553
  CI (99.9%): [1657,206, 2112,781] (assumes normal distribution)


# Run complete. Total time: 00:04:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                     (matrixSize)  Mode  Cnt     Score     Error  Units
VectorizedBenchmark.multiply           100  avgt    9     0,951 ±   0,011  ms/op
VectorizedBenchmark.multiply           500  avgt    9   200,101 ±   1,246  ms/op
VectorizedBenchmark.multiply          1024  avgt    9  1884,993 ± 227,788  ms/op

Process finished with exit code 0
